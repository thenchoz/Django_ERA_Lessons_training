"""
Django tests for branch in qcm app.

Generated by 'manage.py startapp' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/testing/
"""

from random import randrange

from django.test import TestCase

from ..models import Branch
from .test_shortcuts import (
    create_branch,
    create_questions_subset,
    create_random_questions,
)


class BranchModelTest(TestCase):
    """class to test the Branch model"""

    def test_create_branch(self):
        """test a branch creation"""
        name = "empty branch"
        branch = create_branch(branch_name=name)
        branchs = Branch.objects.all()
        self.assertQuerysetEqual(branchs, [branch])

    def test_get_questions_shuffled_is_complete_and_unique_with_one_subset(self):
        """test fct Branch::get_questions_shuffled
        test if all questions are in queryset
        test if queryset is the same size as all question
        test if not equal base list
        """
        branch = create_branch(branch_name="branch shuffled")
        questions_subset = create_questions_subset(
            questions_subset_name="questions shuffled", branch_id=branch.id
        )

        questions = create_random_questions(questions_subset)
        questions_shuffled = branch.get_questions_shuffled()

        # test for all question in queryset
        self.assertEqual(len(questions_shuffled), len(questions))
        for question in questions:
            self.assertTrue(question in questions_shuffled)
        self.assertNotEqual(questions, questions_shuffled)

    def test_get_questions_shuffled_is_complete_and_unique_with_n_subset(self):
        """test fct Branch::get_questions_shuffled
        test if all questions are in queryset
        test if queryset is the same size as all question
        test if not equal base list
        """
        branch = create_branch(branch_name="branch shuffled")
        nb_subsets = randrange(1, 10)

        # create subsets
        questions_subsets = []
        for i in range(nb_subsets):
            questions_subset = create_questions_subset(
                questions_subset_name="questions shuffled " + str(i),
                branch_id=branch.id,
            )
            questions_subsets.append(questions_subset)

        # create questions and get queryset
        nb_questions = randrange(1, 100)
        questions = []
        for i in range(nb_questions):
            jndice = randrange(nb_subsets)
            question = questions_subsets[jndice].question_set.create(
                question_text="random " + str(i)
            )
            questions.append(question)
        questions_shuffled = branch.get_questions_shuffled()

        # test for all question in queryset
        self.assertEqual(len(questions_shuffled), len(questions))
        for question in questions:
            self.assertTrue(question in questions_shuffled)
        self.assertNotEqual(questions, questions_shuffled)
