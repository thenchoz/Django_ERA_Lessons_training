"""
Django views for qcm app.

Generated by 'manage.py startapp' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/http/views/
"""

from django.contrib.auth.decorators import login_required
from django.core.exceptions import ValidationError
from django.http.response import HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.urls import reverse
from django.views import generic

from user_data.shortcuts import (
    check_user_instructor,
    check_user_personnal,
    check_user_student,
)

from .forms import BranchForm, QuestionForm, QuestionsSubsetForm
from .models import Branch, Choice, Question, QuestionsSubset, Training


class IndexView(generic.ListView):
    """generic view of index"""

    template_name = "qcm/index.html"
    context_object_name = "branch_list"

    def get_queryset(self):
        """Return all branch link to a specific user, alphabetic order"""
        user = self.request.user
        if user.is_staff:
            return Branch.objects.all().order_by("name")

        student = check_user_student(self.request)
        if student is not None:
            return student.get_alpha_branch()

        return None


class DetailBranchView(generic.DetailView):
    """generic view of branch question"""

    model = Branch
    template_name = "qcm/detail_branch.html"


class DetailQuestionsSubsetView(generic.DetailView):
    """generic view of branch question"""

    model = QuestionsSubset
    template_name = "qcm/detail_questions_set.html"


class DetailQuestionView(generic.DetailView):
    """generic view of detailed question"""

    model = Question
    template_name = "qcm/detail_question.html"


class ResultsView(generic.DetailView):
    """generic view of results question"""

    model = Question
    template_name = "qcm/results.html"


@login_required
def question_backend(request, branch_id, question_id):
    """answering question view"""
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.GET["choice"])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question answering form.
        return render(
            request,
            "qcm/detail_question.html",
            {
                "question": question,
                "error_message": "You didn't select a choice.",
            },
        )
    else:
        branch = get_object_or_404(Branch, pk=branch_id)
        return render(
            request,
            "qcm/results.html",
            {"branch": branch, "question": question, "given_answer": selected_choice},
        )


@login_required
def during_training_view(request, training_id, question_list):
    """manage view during training"""
    training = get_object_or_404(Training, pk=training_id)
    training.set_from_db()
    question = training.get_question(question_list)
    selected_choice = training.answers[question_list]

    return render(
        request,
        "qcm/training.html",
        {
            "training": training,
            "question_list": question_list,
            "question": question,
            "selected_choice": selected_choice,
        },
    )


@login_required
def start_training_branch(request, branch_id):
    """set training"""
    branch = get_object_or_404(Branch, pk=branch_id)
    student = request.user.student
    training = branch.training_set.create(user=student)
    training.save()
    training.set_questions()
    training.save()

    return during_training_view(request, training.id, 0)


@login_required
def start_training_questions_subset(request, branch_id, questions_set_id):
    """set training"""
    del branch_id  # Ignored parameters
    questions_set = get_object_or_404(QuestionsSubset, pk=questions_set_id)
    student = request.user.student
    training = questions_set.training_set.create(user=student)
    training.save()
    training.set_questions()
    training.save()

    return during_training_view(request, training.id, 0)


@login_required
def training_backend(request, training_id, question_list):
    """training backend, manage db post"""
    training = get_object_or_404(Training, pk=training_id)
    training.set_from_db()
    question = training.get_question(question_list)

    try:
        selected_choice = question.choice_set.get(pk=request.POST["choice"])
        training.answer(question_list, selected_choice.id)
    except (KeyError, Choice.DoesNotExist):
        # change anyway, blank answer
        training.answer(question_list, None)

    # elif for better lecture case # pylint: disable=R1705
    if "next" in request.POST and question_list != training.nb_questions - 1:
        return HttpResponseRedirect(
            reverse(
                "qcm:training",
                args=(
                    training_id,
                    question_list + 1,
                ),
            )
        )
    elif "previous" in request.POST and question_list != 0:
        return HttpResponseRedirect(
            reverse(
                "qcm:training",
                args=(
                    training_id,
                    question_list - 1,
                ),
            )
        )
    elif "submit" in request.POST:
        return HttpResponseRedirect(
            reverse(
                "qcm:results_training",
                args=(
                    training.questions_set.get_branch_id(),
                    training_id,
                ),
            )
        )
    else:
        # at the begin or the end, doesn't change page
        return render(
            request,
            "qcm/training.html",
            {
                "training": training,
                "question_list": question_list,
                "question": question,
            },
        )


class ResultsTrainingView(generic.DetailView):
    """generic view to show a test resutl"""

    model = Training
    template_name = "qcm/results_training.html"


@login_required
def create_branch_view(request):
    """view to create a new Branch"""

    personnal = check_user_personnal(request)
    if personnal is None:
        return HttpResponseRedirect(reverse("main:index"))

    if request.method == "POST":
        try:
            branch_form = BranchForm(request.POST, student=personnal)
            if branch_form.is_valid():
                branch = branch_form.save()
                return HttpResponseRedirect(reverse("qcm:detail", args=(branch.id,)))
        except ValidationError:
            branch_form.clean()
    else:
        branch_form = BranchForm(student=personnal)

    return render(request, "qcm/create_branch.html", {"form": branch_form})


@login_required
def delete_branch_view(request, branch_id):
    """view to delete a Branch"""

    instructor = check_user_instructor(request)
    if instructor is None:
        return HttpResponseRedirect(reverse("qcm:detail", args=(branch_id)))

    branch = get_object_or_404(Branch, pk=branch_id)
    branch.delete()

    return HttpResponseRedirect(reverse("qcm:index"))


@login_required
def create_questions_subset_view(request, branch_id):
    """view to create a new questions subset"""

    instructor = check_user_instructor(request)
    if instructor is None:
        return HttpResponseRedirect(reverse("qcm:detail", args=(branch_id)))

    branch = get_object_or_404(Branch, pk=branch_id)

    if request.method == "POST":
        try:
            questions_subset_form = QuestionsSubsetForm(request.POST, branch=branch)

            if questions_subset_form.is_valid():
                questions_subset = questions_subset_form.save(commit=False)
                questions_subset.parent_branch = branch
                questions_subset.save()

                return HttpResponseRedirect(
                    reverse(
                        "qcm:detail_questions_set",
                        args=(
                            questions_subset.parent_branch.id,
                            questions_subset.id,
                        ),
                    )
                )

        except ValidationError:
            questions_subset_form.clean()
    else:
        questions_subset_form = QuestionsSubsetForm(branch=branch)

    return render(
        request,
        "qcm/create_questions_subset.html",
        {"form": questions_subset_form, "branch": branch},
    )


@login_required
def delete_questions_subset_view(request, questions_subset_id):
    """view to delete a questions subset"""

    instructor = check_user_instructor(request)
    if instructor is None:
        return HttpResponseRedirect(
            reverse("qcm:detail_questions_subset", args=(questions_subset_id))
        )

    questions_subset = get_object_or_404(QuestionsSubset, pk=questions_subset_id)
    branch_id = questions_subset.parent_branch.id
    questions_subset.delete()

    return HttpResponseRedirect(reverse("qcm:detail", args=(branch_id,)))


@login_required
def create_question_view(request, questions_subset_id):
    """view to create a new questions subset"""

    instructor = check_user_instructor(request)
    if instructor is None:
        return HttpResponseRedirect(
            reverse("qcm:detail_questions_subset", args=(questions_subset_id))
        )

    questions_subset = get_object_or_404(QuestionsSubset, pk=questions_subset_id)

    if request.method == "POST":
        try:
            question_form = QuestionForm(
                request.POST, questions_subset=questions_subset
            )

            if question_form.is_valid():
                question = question_form.save(commit=False)
                question.questions_subset = questions_subset
                question.save()

                question_form.save_choices(question)

                # elif for better lecture case # pylint: disable=R1705
                if "create" in request.POST:
                    return HttpResponseRedirect(
                        reverse(
                            "qcm:detail_questions_set",
                            args=(
                                questions_subset.parent_branch.id,
                                questions_subset.id,
                            ),
                        )
                    )

                elif "create_add" in request.POST:
                    return HttpResponseRedirect(
                        reverse(
                            "qcm:create_question",
                            args=(questions_subset.id,),
                        )
                    )

        except ValidationError:
            question_form.clean()
    else:
        question_form = QuestionForm(questions_subset=questions_subset)

    return render(
        request,
        "qcm/create_question.html",
        {"form": question_form, "questionssubset": questions_subset},
    )
