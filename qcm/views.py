"""
Django views for qcm app.

Generated by 'manage.py startapp' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/http/views/
"""

from django.http.response import HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.urls import reverse
from django.views import generic

from .models import Branch, Choice, Question, QuestionsSubset, Training


class IndexView(generic.ListView):
    """generic view of index"""

    template_name = "qcm/index.html"
    context_object_name = "branch_list"

    def get_queryset(self):
        """Return all branch, alphabetic order"""
        return Branch.objects.order_by("name")


class DetailBranchView(generic.DetailView):
    """generic view of branch question"""

    model = Branch
    template_name = "qcm/detail_branch.html"


class DetailQuestionsSubsetView(generic.DetailView):
    """generic view of branch question"""

    model = QuestionsSubset
    template_name = "qcm/detail_questions_set.html"


class DetailQuestionView(generic.DetailView):
    """generic view of detailed question"""

    model = Question
    template_name = "qcm/detail_question.html"


class ResultsView(generic.DetailView):
    """generic view of results question"""

    model = Question
    template_name = "qcm/results.html"


def question_backend(request, branch_id, question_id):
    """answering question view"""
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.GET["choice"])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question answering form.
        return render(
            request,
            "qcm/detail_question.html",
            {
                "question": question,
                "error_message": "You didn't select a choice.",
            },
        )
    else:
        branch = get_object_or_404(Branch, pk=branch_id)
        return render(
            request,
            "qcm/results.html",
            {"branch": branch, "question": question, "given_answer": selected_choice},
        )


def during_training_view(request, training_id, question_list):
    """manage view during training"""
    training = get_object_or_404(Training, pk=training_id)
    training.set_from_db()
    question = training.get_question(question_list)
    selected_choice = training.answers[question_list]

    return render(
        request,
        "qcm/training.html",
        {
            "training": training,
            "question_list": question_list,
            "question": question,
            "selected_choice": selected_choice,
        },
    )


def start_training_branch(request, branch_id):
    """set training"""
    branch = get_object_or_404(Branch, pk=branch_id)
    training = branch.training_set.create()
    training.save()
    training.set_questions()
    training.save()

    return during_training_view(request, training.id, 0)


def start_training_questions_subset(request, branch_id, questions_set_id):
    """set training"""
    del branch_id  # Ignored parameters
    questions_set = get_object_or_404(QuestionsSubset, pk=questions_set_id)
    training = questions_set.training_set.create()
    training.save()
    training.set_questions()
    training.save()

    return during_training_view(request, training.id, 0)


def training_backend(request, training_id, question_list):
    """training backend, manage db post"""
    training = get_object_or_404(Training, pk=training_id)
    training.set_from_db()
    question = training.get_question(question_list)

    try:
        selected_choice = question.choice_set.get(pk=request.POST["choice"])
        training.answer(question_list, selected_choice.id)
    except (KeyError, Choice.DoesNotExist):
        # change anyway, blank answer
        training.answer(question_list, None)

    # elif for better lecture case # pylint: disable=R1705
    if "next" in request.POST and question_list != training.nb_questions - 1:
        return HttpResponseRedirect(
            reverse(
                "qcm:training",
                args=(
                    training_id,
                    question_list + 1,
                ),
            )
        )
    elif "previous" in request.POST and question_list != 0:
        return HttpResponseRedirect(
            reverse(
                "qcm:training",
                args=(
                    training_id,
                    question_list - 1,
                ),
            )
        )
    elif "submit" in request.POST:
        return HttpResponseRedirect(
            reverse(
                "qcm:results_training",
                args=(
                    training.questions_set.get_branch_id(),
                    training_id,
                ),
            )
        )
    else:
        # at the begin or the end, doesn't change page
        return render(
            request,
            "qcm/training.html",
            {
                "training": training,
                "question_list": question_list,
                "question": question,
            },
        )


class ResultsTrainingView(generic.DetailView):
    """generic view to show a test resutl"""

    model = Training
    template_name = "qcm/results_training.html"
